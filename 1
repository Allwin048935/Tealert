import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
import asyncio
import nest_asyncio
from telegram import Bot
import config  # Import the config module
import ta  # Import ta library

interval = '1d'  # 1-day candlesticks

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=50):
    ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate EMA using ta library
def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['close'], window=period).ema_indicator()

# Function to check EMA cross
def check_ema_cross(df, short_period=3, long_period=7):
    df['ema_short'] = calculate_ema(df, short_period)
    df['ema_long'] = calculate_ema(df, long_period)

    cross_over = df['ema_short'].iloc[-2] > df['ema_long'].iloc[-2] and df['ema_short'].iloc[-3] <= df['ema_long'].iloc[-3]
    cross_under = df['ema_short'].iloc[-2] < df['ema_long'].iloc[-2] and df['ema_short'].iloc[-3] >= df['ema_long'].iloc[-3]

    return cross_over, cross_under

# Updated function to plot candlesticks with EMA chart, and return an image buffer
def plot_candles_with_ema(df, symbol, title):
    # Ensure the index is in datetime format and the data is in the correct format for mplfinance
    mpf_data = df[['Open', 'High', 'Low', 'Close']].copy()

    # Calculate EMA for short and long periods
    df['ema_short'] = calculate_ema(df, short_period=3)
    df['ema_long'] = calculate_ema(df, long_period=7)

    # Create custom market colors for up and down candlesticks
    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)

    # Create a custom style using the market colors and other style settings
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)

    # Prepare the plot figure with a custom ratio and return figure for further customization
    fig, axlist = mpf.plot(mpf_data,
                           figratio=(10, 6),
                           type="candle",
                           style=s,
                           tight_layout=True,
                           datetime_format='%H:%M',
                           ylabel="Precio ($)",
                           returnfig=True)

    # Plot the EMAs on top of the candlestick chart
    axlist[0].plot(df.index, df['ema_short'], label='Short-term EMA (3)', color='red', linestyle='--')
    axlist[0].plot(df.index, df['ema_long'], label='Long-term EMA (7)', color='purple', linestyle='--')

    # Add Title and Legend
    axlist[0].set_title(f"{symbol} - {title}", fontsize=25, style='italic', fontfamily='fantasy')
    axlist[0].legend()

    # Adjust layout and save plot to a BytesIO object
    plt.tight_layout()
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)

    # Close the figure to avoid memory overflow
    plt.close(fig)

    return buf

# Function to send Telegram message and image (now defined as async)
async def send_telegram_message(symbol, message, image_buffer):
    # Check if the current message is the same as the previous one for this symbol
    if last_alert_messages.get(symbol) != message:
        try:
            await telegram_bot.send_message(chat_id=config.CHAT_ID, text=message)
            # Send image
            await telegram_bot.send_photo(chat_id=config.CHAT_ID, photo=image_buffer)
            # Update the last alert message for this symbol
            last_alert_messages[symbol] = message
        except Exception as e:
            print(f"Error sending message for {symbol}: {e}")

# Main function (now defined as async)
async def main():
    while True:
        for symbol in config.SELECTED_SYMBOLS:
            try:
                historical_data = get_historical_data(symbol, interval)
                cross_over, cross_under = check_ema_cross(historical_data)

                if cross_over:
                    message = f'Cross over detected on #{symbol}'
                    title = f'Cross Over for {symbol}'
                    # Plot and get image buffer
                    image_buffer = plot_candles_with_ema(historical_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)
                elif cross_under:
                    message = f'Cross under detected on #{symbol}'
                    title = f'Cross Under for {symbol}'
                    # Plot and get image buffer
                    image_buffer = plot_candles_with_ema(historical_data, symbol, title)
                    await send_telegram_message(symbol, message, image_buffer)

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        # Sleep for a specified interval before checking again
        await asyncio.sleep(300)  # Adjust the sleep duration as needed

# Initialize Telegram Bot
telegram_bot = Bot(token=config.TELEGRAM_TOKEN)

# Use nest_asyncio to allow running asyncio in Jupyter notebooks
nest_asyncio.apply()

# Create and run the event loop
asyncio.run(main())
